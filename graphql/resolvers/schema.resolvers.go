package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.61

import (
	"context"
	"errors"
	"log"

	"github.com/google/uuid"
	"github.com/paundraP/be-mcs/user-service/graphql/generated"
	"github.com/paundraP/be-mcs/user-service/models"
	"golang.org/x/crypto/bcrypt"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input generated.CreateUserInput) (*generated.User, error) {
	userId := uuid.New()
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(input.Password), bcrypt.DefaultCost)
	if err != nil {
		log.Fatalf("Failed to hash password: %v", err)
		return nil, err
	}
	userExist := r.UserRepo.GetUserByName(input.Name)
	if userExist {
		return nil, errors.New("user already exist")
	}
	user := &models.User{
		ID:       userId.String(),
		Name:     input.Name,
		Email:    input.Email,
		Password: string(hashedPassword),
	}
	if err := r.UserRepo.CreateUser(user); err != nil {
		return nil, err
	}
	return &generated.User{
		ID:       user.ID,
		Name:     user.Name,
		Email:    user.Email,
		Password: "rahasia",
	}, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*bool, error) {
	err := r.UserRepo.DeleteUser(id)
	if err != nil {
		failure := false
		return &failure, err
	}
	success := true
	return &success, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*generated.User, error) {
	user, err := r.UserRepo.GetUserByID(id)
	if err != nil {
		return nil, err
	}
	return &generated.User{
		ID:       user.ID,
		Name:     user.Name,
		Email:    user.Email,
		Password: user.Password,
	}, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*generated.User, error) {
	users, err := r.UserRepo.GetAllUsers()
	if err != nil {
		return nil, err
	}

	var res []*generated.User
	for _, user := range users {
		res = append(res, &generated.User{
			ID:       user.ID,
			Name:     user.Name,
			Email:    user.Email,
			Password: user.Password,
		})
	}
	return res, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
